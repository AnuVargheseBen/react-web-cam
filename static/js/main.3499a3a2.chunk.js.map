{"version":3,"sources":["components/camera.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["WebCamCapture","props","webcam","state","onClick","handleBack","setState","screenshot","handleSendImage","isRequesting","axios","post","base64Img","imgSize","then","res","catch","err","alert","finally","handleScreenshot","getScreenshot","video","clientHeight","clientWidth","newImgSize","width","height","className","this","src","id","audio","ref","webcamRef","videoConstraints","facingMode","screenshotFormat","minScreenshotHeight","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"sUA8HeA,G,wDA1Gb,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IALRC,YAI0B,IAH1BC,WAG0B,IAF1BC,aAE0B,IAU1BC,WAAa,WACX,EAAKC,SAAS,CAAEC,WAAY,QAXJ,EAc1BC,gBAAkB,WAChB,EAAKF,SAAS,CAAEG,cAAc,IAC9BC,IACGC,KAAK,mCAAoC,CACxCC,UAAW,EAAKT,MAAMI,WACtBM,QAAS,EAAKV,MAAMU,UAErBC,MAAK,SAACC,GACL,EAAKT,SAAS,CAAEC,WAAY,UAE7BS,OAAM,SAACC,GACNC,MAAM,8CACN,EAAKZ,SAAS,CAAEC,WAAY,UAE7BY,SAAQ,WACP,EAAKb,SAAS,CAAEG,cAAc,QA7BV,EAiC1BW,iBAAmB,WACjB,IAAIb,EAAa,EAAKL,OAAOmB,gBADN,EAEe,EAAKnB,OAAOoB,MAA1CC,EAFe,EAEfA,aAAcC,EAFC,EAEDA,YAClBC,EAAsB,GACtBF,EAAeC,EACjBC,EAAWC,MAAQF,EAEnBC,EAAWE,OAASJ,EAGtB,EAAKjB,SAAS,CACZC,WAAYA,EACZM,QAASY,KA3CX,EAAKvB,OAAS,KACd,EAAKC,MAAQ,CACXI,WAAY,KACZM,QAAS,GACTJ,cAAc,GANQ,E,qDAiDhB,IAAD,OAKP,OACE,6BACE,yBAAKmB,UAAU,aACZC,KAAK1B,MAAMI,WACV,yBAAKqB,UAAU,iBACb,yCAASC,KAAK1B,MAAMU,QAApB,CAA6BiB,IAAKD,KAAK1B,MAAMI,eAG/C,kBAAC,IAAD,CACEwB,GAAG,SACHC,OAAO,EACPC,IAAK,SAACC,GAAD,OAAqB,EAAKhC,OAASgC,GACxCC,iBAhBe,CACvBC,WAAY,QAgBJC,iBAAiB,aACjBC,oBAAqB,OAK3B,yBAAKV,UAAU,UACb,4BACEW,UAAWV,KAAK1B,MAAMI,WACtBqB,UAAU,cACVxB,QAASyB,KAAKxB,YAHhB,WAQA,4BACEkC,WAAYV,KAAK1B,MAAMI,WACvBqB,UAAU,oBACVxB,QAASyB,KAAKT,mBAGhB,4BACEmB,UAAWV,KAAK1B,MAAMI,YAAcsB,KAAK1B,MAAMM,aAC/CmB,UAAU,cACVxB,QAASyB,KAAKrB,iBAHhB,SAMGqB,KAAK1B,MAAMM,aACV,yBAAKmB,UAAU,UAAUE,IAAK,iBAE9B,U,GAtGcU,IAAMC,YCFnBC,EARc,SAACzC,GAC5B,OACE,yBAAK2B,UAAU,OACb,kBAAC,EAAD,QCIce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdzC,OAAM,SAAA0C,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3499a3a2.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./camera.css\";\r\n\r\ntype ImgSize = { width?: number; height?: number };\r\n\r\ninterface state {\r\n  screenshot: string | null;\r\n  imgSize: ImgSize;\r\n  isRequesting: boolean;\r\n}\r\n\r\ninterface Props {}\r\n\r\nclass WebCamCapture extends React.Component<Props, state> {\r\n  webcam: any;\r\n  state: state;\r\n  onClick: any;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.webcam = null;\r\n    this.state = {\r\n      screenshot: null,\r\n      imgSize: {},\r\n      isRequesting: false,\r\n    };\r\n  }\r\n\r\n  handleBack = () => {\r\n    this.setState({ screenshot: null });\r\n  };\r\n\r\n  handleSendImage = () => {\r\n    this.setState({ isRequesting: true });\r\n    axios\r\n      .post(\"http://localhost:3333/screenshot\", {\r\n        base64Img: this.state.screenshot,\r\n        imgSize: this.state.imgSize,\r\n      })\r\n      .then((res) => {\r\n        this.setState({ screenshot: null });\r\n      })\r\n      .catch((err) => {\r\n        alert(\"Some technical issue please contact admin.\");\r\n        this.setState({ screenshot: null });\r\n      })\r\n      .finally(() => {\r\n        this.setState({ isRequesting: false });\r\n      });\r\n  };\r\n\r\n  handleScreenshot = () => {\r\n    var screenshot = this.webcam.getScreenshot();\r\n    const { clientHeight, clientWidth } = this.webcam.video;\r\n    let newImgSize: ImgSize = {};\r\n    if (clientHeight > clientWidth) {\r\n      newImgSize.width = clientWidth;\r\n    } else {\r\n      newImgSize.height = clientHeight;\r\n    }\r\n\r\n    this.setState({\r\n      screenshot: screenshot,\r\n      imgSize: newImgSize,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const videoConstraints = {\r\n      facingMode: \"user\",\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"rectangle\">\r\n          {this.state.screenshot ? (\r\n            <div className=\"img_container\">\r\n              <img {...this.state.imgSize} src={this.state.screenshot} />\r\n            </div>\r\n          ) : (\r\n            <Webcam\r\n              id=\"camera\"\r\n              audio={false}\r\n              ref={(webcamRef: any) => (this.webcam = webcamRef)}\r\n              videoConstraints={videoConstraints}\r\n              screenshotFormat=\"image/jpeg\"\r\n              minScreenshotHeight={200}\r\n            />\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"footer\">\r\n          <button\r\n            disabled={!this.state.screenshot}\r\n            className=\"button back\"\r\n            onClick={this.handleBack}\r\n          >\r\n            Abbruch\r\n          </button>\r\n\r\n          <button\r\n            disabled={!!this.state.screenshot}\r\n            className=\"button screenshot\"\r\n            onClick={this.handleScreenshot}\r\n          ></button>\r\n\r\n          <button\r\n            disabled={!this.state.screenshot || this.state.isRequesting}\r\n            className=\"button send\"\r\n            onClick={this.handleSendImage}\r\n          >\r\n            Fertig\r\n            {this.state.isRequesting ? (\r\n              <img className=\"loading\" src={\"/loading.svg\"} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WebCamCapture;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Webcam from \"./components/camera\";\ninterface Props {}\n\nconst App: React.FC<Props> = (props) => {\n  return (\n    <div className=\"App\">\n      <Webcam />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}